using <stdio.h>::{perror, printf};
using <stdlib.h>::{exit};
using <string.h>::{strlen, memset, memcpy};
using <assert.h>::{assert};
using string;
using io;
using io::unix;
using time;
using err;
using net;
using net::udp as netudp;
using <unistd.h>::{usleep};
using net::address;
using <stdlib.h>::{atoi};

pub enum Event {
    Enter,
    Ok,
    Data,
    Timeout,
}

struct Socket {
    usize   id;
    bool    used;
    bool    close;
    bool    isopen;
    bool    isready;
    string::String+1460 mut inbuf;
}

struct StateMem {
}

struct Modem+ {
    net::Engine         netengine;
    State               state;

    usize               current_state_socket;
    int                 current_state_expectsize;

    io::Io              mut io;
    io::Io              mut timeout;
    usize               retries;
    u8                  network;

    //TODO disable echo, so we never receive that much
    string::String+1460 mut outbuf;
    string::String+1460 mut inbuf;

    usize   mut maxfd;
    Socket  sockets[];
}


pub fn new(Modem+maxfd mut* self)
    where maxfd < 16
{
    memset(self, 0, sizeof(Modem));
    self->netengine.impl_new_udp = (void*)udp_new;
    self->netengine.handle1 = self;
    self->maxfd = maxfd;
}

// high level socket api


fn udp_new(net::Engine *engine, err::Err+et mut*e, address::Address *local_addr, io::Async mut* unsafe async) -> netudp::Socket
    where err::checked(*e)
{
    Modem mut* self = (Modem mut*)engine->handle1;
    static_attest(safe(self));

    assert(async != 0);
    static_attest(safe(async));

    netudp::Socket mut sock = {0};
    (sock.ctx).async    = async;
    (sock.ctx).handle   = self;
    sock.impl_sendto    = (void*)sendto;
    sock.impl_recvfrom  = (void*)recvfrom;
    sock.impl_close     = sockclose;

    static_attest(self->maxfd == len(self->sockets));
    for (usize mut i = 0; i < self->maxfd; i++) {
        if self->sockets[i].used == false {
            self->sockets[i].used = true;
            sock.ctx.fd = (int)i;

            printf("allocated sock %zu\n", i);
            return sock;
        }
    }

    err::fail(e, 2, "too many open sockets");
    return sock;
}

fn sockclose(io::Context mut* ctx)
{
    Modem mut * modem = as<Modem mut *>(ctx->handle);
    static_attest(safe(modem));

    usize idx = as<usize>(ctx->fd);
    static_attest(idx < len(modem->sockets));

    printf("api close sock %zu\n", idx);

    modem->sockets[idx].close = true;
    ctx->isvalid = false;

}

fn recvfrom(
        netudp::Socket mut*self,
        err::Err+et mut *e,
        u8 mut* mem,
        usize mut*memlen,
        address::Address *addr
) -> io::Result
    where err::checked(*e)
    where *memlen >= len(mem)
{
    Modem mut * modem = as<Modem mut *>(self->ctx.handle);
    static_attest(safe(modem));
    static_attest(safe(self->ctx.async));

    return recvfrom_(modem, self->ctx.async, e, self, mem, memlen, addr);
}


fn recvfrom_(
        Modem mut* self,
        io::Async mut* async,
        err::Err+et mut *e,
        netudp::Socket mut* sock,
        u8 mut* mem,
        usize mut*memlen,
        address::Address *addr
) -> io::Result
    where err::checked(*e)
    where *memlen >= len(mem)
{
    if self->state != State::Ready {
        return io::Result::Later;
    }

    usize idx = as<usize>((sock->ctx).fd);
    static_attest(idx < len(self->sockets));

    if self->sockets[idx].inbuf.len == 0 {
        return io::Result::Later;
    }

    if *memlen > self->sockets[idx].inbuf.len {
        *memlen = self->sockets[idx].inbuf.len;
    }

    memcpy(mem, self->sockets[idx].inbuf.mem, *memlen);

    printf("received %zu bytes into userspace\n", *memlen);

    self->sockets[idx].inbuf.clear();

    return io::Result::Ready;
}



fn sendto(
        netudp::Socket mut*self,
        err::Err+et mut *e,
        u8* mem,
        usize mut*memlen,
        address::Address *addr
) -> io::Result
    where err::checked(*e)
    where *memlen <= len(mem)
{
    Modem mut * modem = as<Modem mut *>((self->ctx).handle);
    static_attest(safe(modem));
    static_attest(safe(self->ctx.async));
    return sendto_(modem, self->ctx.async, e, self, mem, memlen, addr);
}

fn sendto_(
        Modem mut* self,
        io::Async mut* async,
        err::Err+et mut *e,
        netudp::Socket mut* sock,
        u8* mem,
        usize mut*memlen,
        address::Address *addr
) -> io::Result
    where err::checked(*e)
    where *memlen <= len(mem)
{
    if self->state != State::Ready {
        return io::Result::Later;
    }

    usize idx = as<usize>((sock->ctx).fd);
    static_attest(idx < len(self->sockets));

    if !((self->sockets)[idx]).isopen {
        return io::Result::Later;
    }

    (self->outbuf).clear();
    (self->outbuf).append_bytes(mem, *memlen);


    printf("sending %zu bytes\n", (self->outbuf).len);

    string::String+100 mut str = {0};
    str.format("AT+QISEND=%u,%u,\"", idx + 1, (self->outbuf).len);
    addr->ip_to_string(&str);
    str.format("\",%u", addr->get_port());

    static_attest(nullterm(str.mem));
    self->cmd_cstr(e, str.mem);
    if err::check(e) { return io::Result::Error; }

    self->state = State::Send;
    async->select(e, &self->io, io::Ready::Read);

    return io::Result::Ready;
}



// low level interface



// called whenever the modem has nothing to do
fn idle(Modem mut* self, err::Err+et mut *e, io::Async mut* async) -> io::Result
    where err::checked(*e)
{
    static_attest(len(self->sockets) > self->maxfd);
    for (usize mut i = 0; i < self->maxfd; i++) {
        if self->sockets[i].used {
            // see if we need to open any sockets
            if !self->sockets[i].isopen {
                self->current_state_socket = i;
                self->state = State::Open;
                return self->next(e, async, Event::Enter);
            }
            // or close
            if self->sockets[i].close {
                self->current_state_socket = i;
                self->state = State::Close;
                return self->next(e, async, Event::Enter);
            }
            // or it has data to read
            if self->sockets[i].isready && self->sockets[i].inbuf.len == 0 {
                self->current_state_socket = i;
                self->state = State::Recv;
                return self->next(e, async, Event::Enter);
            }
        }
    }
    return io::Result::Later;
}

pub fn poll(Modem mut* self, err::Err+et mut *e, io::Async mut* async) -> io::Result
    where err::checked(*e)
{
    static_attest(len(self->sockets) > self->maxfd);

    io::Result mut rr =  io::Result::Later;


    if (self->timeout).read_impl != 0 {
        string::String+8 mut buf = {0};
        if (self->timeout).read(e, &buf) == io::Result::Ready {

            (self->timeout).close();

            if err::check(e) { return io::Result::Error; }

            next(self, e, async, Event::Timeout);
            if err::check(e) { return io::Result::Error; }

            async->select(e, &self->io, io::Ready::Read);
            if err::check(e) { return io::Result::Error; }
        }
    }


    if self->current_state_expectsize > 0 && self->state == State::Recv {
        static_attest(self->current_state_socket < len(self->sockets));


        char mut *exbuf = self->sockets[self->current_state_socket].inbuf.mem;
        usize exlen     = self->sockets[self->current_state_socket].inbuf.len;
        static_attest(len(exbuf) > exlen);
        u8 mut * buf = (u8 mut*)(exbuf + exlen);

        usize mut readsize = (usize)self->current_state_expectsize;
        (self->io).read_bytes(e, buf, &readsize);
        if err::check(e) { return io::Result::Error; }
        self->sockets[self->current_state_socket].inbuf.len += readsize;
        self->current_state_expectsize -= (int)readsize;

        printf("expecting: %d, read: %zu\n",
            self->current_state_expectsize,
            readsize);
        assert(self->current_state_expectsize>=0);
    }


    switch (self->io).readline(e, &self->inbuf) {
        io::Result::Ready => {
            if err::check(e) { return io::Result::Error; }
            if (self->inbuf).len > 0 {
                printf("        >%.*s<\n", as<int>((self->inbuf).len), (self->inbuf).mem);
                if string::eq_cstr(&self->inbuf, "OK") {

                    rr = next(self, e, async, Event::Ok);
                    if err::check(e) { return io::Result::Error; }

                } else if string::starts_with_cstr(&self->inbuf, "+QIURC: \"recv\",") {
                    static_attest((self->inbuf).len < len((self->inbuf).mem));
                    static_attest(len((self->inbuf).mem) > 15 );

                    int fd = (int)atoi((self->inbuf).mem + 15) - 1;
                    if fd >= 0 && (usize)fd < self->maxfd {
                        self->sockets[(usize)fd].isready = true;
                        printf("socket activated: %d\n", fd);
                        if self->state == State::Ready {
                            next(self, e, async, Event::Enter);
                            if err::check(e) { return io::Result::Error; }
                        }
                    }
                }  else {
                    rr = next(self, e, async, Event::Data);
                    if err::check(e) { return io::Result::Error; }
                }
            }

            (self->inbuf).clear();
        }
        io::Result::Error => {
            err::check(e);
            return io::Result::Error;
        }
        io::Result::Later => {
            if self->state == State::Send && (self->inbuf).eq_cstr(">") {
                rr = next(self, e, async, Event::Data);
                (self->inbuf).clear();
            }
        }
        io::Result::Eof => {
            return io::Result::Eof;
        }
    }

    if self->state == State::Ready {
        return self->idle(e, async);
    }

    if err::check(e) {
        return io::Result::Error;
    }

    return rr;
}

enum State {
    Reboot,
    RebootWait,
    InitModem,
    InitUsim,
    WaitForReg,
    InitApn,
    InitPdp,
    GetIpAddress,
    Ready,
    Open,
    Close,
    Send,
    SendDone,
    Recv,
}


pub fn next(Modem mut* self, err::Err+et mut *e, io::Async mut* async, Event ev) -> io::Result
    where err::checked(*e)
{
    static_attest(len(self->inbuf.mem) > 7 );
    static_attest(len(self->sockets) > self->maxfd);

    switch self->state {
        State::Reboot => {
            switch ev {
                Event::Enter => {
                    self->timeout = io::timeout(async, e, time::from_seconds(2));
                    if err::check(e) {
                        return io::Result::Error;
                    }
                    printf("reboot\n");
                    cmd_cstr(self, e, "AT+CFUN=1,1");
                    if err::check(e) { return io::Result::Error; }
                }
                Event::Ok => {
                    self->state = State::RebootWait;
                    return next(self, e, async, Event::Enter);
                }
                Event::Data => {}
                Event::Timeout => {
                    self->state = State::RebootWait;
                    return next(self, e, async, Event::Enter);
                }
            }
        }
        State::RebootWait => {
            switch ev {
                Event::Enter => {
                    self->timeout = io::timeout(async, e, time::from_seconds(3));
                    if err::check(e) { return io::Result::Error; }
                }
                Event::Ok => {}
                Event::Data => {}
                Event::Timeout => {
                    self->state = State::InitModem;
                    return next(self, e, async, Event::Enter);
                }
            }
        }
        State::InitModem => {
            switch ev {
                Event::Enter => {
                    self->timeout = io::timeout(async, e, time::from_seconds(1));
                    if err::check(e) { return io::Result::Error; }
                    async->select(e, &self->timeout, io::Ready::Read);
                    if err::check(e) { return io::Result::Error; }

                    printf("waiting for modem\n");
                    //cmd_cstr(self, e, "ATE0");
                    //if err::check(e) { return io::Result::Error; }
                    cmd_cstr(self, e, "ATE0");
                    if err::check(e) { return io::Result::Error; }
                    cmd_cstr(self, e, "AT");
                    if err::check(e) { return io::Result::Error; }
                }
                Event::Ok => {
                    (self->timeout).close();

                    self->state = State::InitUsim;
                    return next(self, e, async, Event::Enter);
                }
                Event::Data => {}
                Event::Timeout => {
                    (self->timeout).close();
                    return next(self, e, async, Event::Enter);
                }
            }
        }
        State::InitUsim => {
            switch ev {
                Event::Enter => {
                    self->timeout = io::timeout(async, e, time::from_millis(100));
                    if err::check(e) { return io::Result::Error; }
                    async->select(e, &self->timeout, io::Ready::Read);
                    if err::check(e) { return io::Result::Error; }

                    if err::check(e) {
                        return io::Result::Error;
                    }
                    self->retries = 0;
                    printf("waiting for sim\n");
                    cmd_cstr(self, e, "AT+CPIN?");
                    if err::check(e) { return io::Result::Error; }
                }
                Event::Ok => {
                    (self->timeout).close();

                    self->state = State::WaitForReg;
                    return next(self, e, async, Event::Enter);
                }
                Event::Data => {
                    if string::starts_with_cstr(&self->inbuf, "+CPIN: ") {
                        static_attest((self->inbuf).len < len((self->inbuf).mem));
                        static_attest(len((self->inbuf).mem) > 7 );

                        printf("SIM: >%.*s<\n", as<int>((self->inbuf).len - 7), (self->inbuf).mem + 7);
                    }
                }
                Event::Timeout => {
                    (self->timeout).close();

                    self->retries += 1;
                    printf("waiting for sim %zu\n", self->retries);
                    cmd_cstr(self, e, "AT+CPIN?");
                    if err::check(e) { return io::Result::Error; }

                    if self->retries > 10 {
                        err::fail(e, 10, "sim timeout");
                        return io::Result::Error;
                    } else {
                        self->timeout = io::timeout(async, e, time::from_seconds(1));
                        if err::check(e) { return io::Result::Error; }
                        async->select(e, &self->timeout, io::Ready::Read);
                        if err::check(e) { return io::Result::Error; }
                    }
                }
            }
        }
        State::WaitForReg => {
            switch ev {
                Event::Enter => {
                    self->timeout = io::timeout(async, e, time::from_millis(100));
                    if err::check(e) { return io::Result::Error; }
                    async->select(e, &self->timeout, io::Ready::Read);
                    if err::check(e) { return io::Result::Error; }

                    self->retries = 0;
                    printf("waiting for network\n");
                    cmd_cstr(self, e, "AT+CREG?");
                    if err::check(e) { return io::Result::Error; }
                }
                Event::Ok => {

                    if self->network == 5 || self->network == 1 {
                        self->state = State::InitApn;
                        return next(self, e, async, Event::Enter);
                    }
                }
                Event::Data => {
                    if string::starts_with_cstr(&self->inbuf, "+CREG: ") && (self->inbuf).len > 9  {
                        static_attest(9 < len((self->inbuf).mem));
                        self->network = as<u8>(((self->inbuf).mem)[9] - '0');
                    }
                }
                Event::Timeout => {
                    (self->timeout).close();

                    self->retries += 1;
                    printf("waiting for network %zu\n", self->retries);
                    cmd_cstr(self, e, "AT+CREG?");
                    if err::check(e) { return io::Result::Error; }

                    if self->retries > 10 {
                        err::fail(e, 10, "reg retry timeout");
                        return io::Result::Error;
                    } else {
                        self->timeout = io::timeout(async, e, time::from_seconds(1));
                        if err::check(e) { return io::Result::Error; }
                        async->select(e, &self->timeout, io::Ready::Read);
                        if err::check(e) { return io::Result::Error; }
                    }
                }
            }
        }
        State::InitApn => {
            switch ev {
                Event::Enter => {
                    self->timeout = io::timeout(async, e, time::from_millis(100));
                    if err::check(e) { return io::Result::Error; }
                    async->select(e, &self->timeout, io::Ready::Read);
                    if err::check(e) { return io::Result::Error; }

                    printf("setting apn\n");
                    cmd_cstr(self, e, r#"AT+QICSGP=1,1,"iot.1nce.net","","",0"#);
                    if err::check(e) { return io::Result::Error; }
                }
                Event::Ok => {
                    (self->timeout).close();

                    self->state = State::InitPdp;
                    return next(self, e, async, Event::Enter);
                }
                Event::Data => {}
                Event::Timeout => {
                    (self->timeout).close();
                    err::fail(e, 10, "init apn timeout");
                    return io::Result::Error;
                }
            }
        }
        State::InitPdp => {
            switch ev {
                Event::Enter => {
                    self->timeout = io::timeout(async, e, time::from_seconds(10));
                    if err::check(e) { return io::Result::Error; }
                    async->select(e, &self->timeout, io::Ready::Read);
                    if err::check(e) { return io::Result::Error; }

                    printf("waiting for pdp\n");
                    cmd_cstr(self, e, "AT+QIACT=1");
                    if err::check(e) { return io::Result::Error; }
                }
                Event::Ok => {
                    (self->timeout).close();

                    self->state = State::GetIpAddress;
                    return next(self, e, async, Event::Enter);
                }
                Event::Data => {
                    if string::starts_with_cstr(&self->inbuf, "ERROR") {
                        (self->timeout).close();
                        err::fail(e, 11, "pdp error");
                        return io::Result::Error;
                    }
                }
                Event::Timeout => {
                    (self->timeout).close();
                    err::fail(e, 11, "pdp timeout");
                    return io::Result::Error;
                }
            }
        }
        State::GetIpAddress => {
            switch ev {
                Event::Enter => {
                    self->timeout = io::timeout(async, e, time::from_millis(100));
                    if err::check(e) { return io::Result::Error; }
                    async->select(e, &self->timeout, io::Ready::Read);
                    if err::check(e) { return io::Result::Error; }

                    printf("get ip address\n");
                    cmd_cstr(self, e, "AT+QIACT?");
                    if err::check(e) { return io::Result::Error; }
                }
                Event::Ok => {
                    (self->timeout).close();

                    self->state = State::Ready;
                    return next(self, e, async, Event::Enter);
                }
                Event::Data => {}
                Event::Timeout => {
                    (self->timeout).close();

                    printf("get ip timeout\n");
                    self->state = State::Reboot;
                    return next(self, e, async, Event::Enter);
                }
            }
        }
        State::Ready => {
            switch ev {
                Event::Enter => {
                    printf("ready \n");
                    self->timeout = io::timeout(async, e, time::from_seconds(2));
                    if err::check(e) { return io::Result::Error; }

                    return io::Result::Ready;
                }
                Event::Ok       => {}
                Event::Data     => {}
                Event::Timeout  => {
                    printf("keepalive\n");
                    cmd_cstr(self, e, "AT");
                    if err::check(e) { return io::Result::Error; }
                    self->timeout = io::timeout(async, e, time::from_seconds(2));
                    if err::check(e) { return io::Result::Error; }
                }
            }
        }
        State::Open => {
            switch ev {
                Event::Enter => {
                    printf("opening socket %zu\n", self->current_state_socket);

                    self->timeout = io::timeout(async, e, time::from_millis(200));
                    if err::check(e) { return io::Result::Error; }
                    async->select(e, &self->timeout, io::Ready::Read);
                    if err::check(e) { return io::Result::Error; }

                    //TODO random port
                    string::String+100 mut str = {0};
                    str.format("AT+QIOPEN=1,%u,\"UDP SERVICE\",\"127.0.0.1\",0,200%u,0",
                        self->current_state_socket + 1, self->current_state_socket + 1);

                    static_attest(nullterm(str.mem));
                    cmd_cstr(self, e, str.mem);
                    if err::check(e) { return io::Result::Error; }
                }
                Event::Ok => {
                }
                Event::Data => {
                    if string::starts_with_cstr(&self->inbuf, "+QIOPEN: ") && (self->inbuf).len > 11  {

                        (self->timeout).close();

                        static_attest(self->current_state_socket < len(self->sockets));
                        ((self->sockets)[self->current_state_socket]).isopen = true;
                        self->current_state_socket = 0;

                        self->state = State::Ready;
                        return next(self, e, async, Event::Enter);
                    }
                }
                Event::Timeout => {
                    (self->timeout).close();
                    err::fail(e, 10, "open timeout");
                    return io::Result::Error;
                }
            }
        }
        State::Close => {
            switch ev {
                Event::Enter => {
                    printf("closing socket %zu\n", self->current_state_socket);

                    self->timeout = io::timeout(async, e, time::from_millis(100));
                    if err::check(e) { return io::Result::Error; }
                    async->select(e, &self->timeout, io::Ready::Read);
                    if err::check(e) { return io::Result::Error; }

                    //TODO random port
                    string::String+100 mut str = {0};
                    str.format("AT+QICLOSE=%u", self->current_state_socket + 1);
                    static_attest(nullterm(str.mem));
                    cmd_cstr(self, e, str.mem);
                    if err::check(e) { return io::Result::Error; }


                }
                Event::Ok => {
                    self->state = State::Ready;
                    memset(&self->sockets[self->current_state_socket], 0, sizeof(Socket));
                    return next(self, e, async, Event::Enter);
                }
                Event::Data => {}
                Event::Timeout => {
                    (self->timeout).close();
                    err::fail(e, 10, "close timeout");
                    return io::Result::Error;
                }
            }
        }
        State::Send => {
            switch ev {
                Event::Enter => {
                    self->timeout = io::timeout(async, e, time::from_millis(100));
                }
                Event::Ok => {}
                Event::Data => {
                    if string::starts_with_cstr(&self->inbuf, ">") {
                        (self->timeout).close();
                        usize mut l = (self->outbuf).len;
                        (self->io).write_bytes(e, as<u8*>((self->outbuf).mem), &l);
                        if err::check(e) {
                            return io::Result::Error;
                        }

                        self->state = State::SendDone;
                        return next(self, e, async, Event::Enter);
                    }
                }
                Event::Timeout => {
                    (self->timeout).close();
                    err::fail(e, 10, "send timeout");
                    return io::Result::Error;
                }
            }
        }
        State::SendDone => {
            switch ev {
                Event::Enter => {
                    self->timeout = io::timeout(async, e, time::from_millis(500));
                }
                Event::Ok => {}
                Event::Data => {
                    if string::starts_with_cstr(&self->inbuf, "SEND OK") {
                        (self->timeout).close();
                        self->state = State::Ready;
                        return next(self, e, async, Event::Enter);
                    }
                }
                Event::Timeout => {
                    (self->timeout).close();
                    err::fail(e, 10, "send timeout");
                    return io::Result::Error;
                }
            }
        }
        State::Recv => {
            switch ev {
                Event::Enter => {
                    self->timeout = io::timeout(async, e, time::from_millis(400));
                    if err::check(e) { return io::Result::Error; }

                    string::String+50  mut str = {0};
                    str.format("AT+QIRD=%u,%u", self->current_state_socket + 1, static(len(self->sockets[0].inbuf.mem)));
                    static_attest(nullterm(str.mem));
                    self->cmd_cstr(e, str.mem);
                    if err::check(e) { return io::Result::Error; }

                    self->current_state_expectsize = -1;
                }
                Event::Ok => {

                    if self->current_state_expectsize != 0 {
                        err::fail(e, 11, "short read");
                        return io::Result::Error;
                    }

                    self->state = State::Ready;
                    return next(self, e, async, Event::Enter);
                }
                Event::Data => {
                    if string::starts_with_cstr(&self->inbuf, "+QIRD: ") {
                        static_attest(len((self->inbuf).mem) > 7);
                        self->current_state_expectsize = (int)atoi((self->inbuf).mem + 7);

                        // read the addtional \r or \n at the end not consumed by readline
                        u8 mut nop[2];
                        usize mut nopl = 1;
                        (self->io).read_bytes(e, nop, &nopl);
                        if err::check(e) { return io::Result::Error; }

                        if self->current_state_expectsize == 0 {
                            static_attest(self->current_state_socket < len(self->sockets));
                            self->sockets[self->current_state_socket].isready = false;
                        }
                    }
                }
                Event::Timeout => {
                    (self->timeout).close();
                    err::fail(e, 10, "receive timeout");
                    return io::Result::Error;
                }
            }
        }
        default => {
            switch ev {
                Event::Enter => {}
                Event::Data => {
                    printf("unhandled modem response: >%.*s<\n", as<int>((self->inbuf).len), (self->inbuf).mem);
                }
                Event::Ok => {
                    printf("bug: ok without command. OUT OF SYNC!\n");
                }
                Event::Timeout => {}
            }

        }
    }

    return io::Result::Later;
}



pub fn cmd_cstr(Modem mut* self, err::Err+et mut*e, char *cstr)
    where nullterm(cstr)
    where err::checked(*e)
{
    usize mut cstrlen = 1;
    (self->io).write_bytes(e, (u8*)"\r", &cstrlen);
    if err::check(e) {
        return;
    }

    cstrlen = string::strlen(cstr);
    (self->io).write_bytes(e, (u8*)cstr, &cstrlen);
    if err::check(e) {
        return;
    }

    cstrlen = 1;
    (self->io).write_bytes(e, (u8*)"\r", &cstrlen);
    if err::check(e) {
        return;
    }
}




pub fn start(Modem+maxfd mut* self, err::Err+et mut *e, io::Async mut* async)
    where err::checked(*e)
{
    next(self, e, async, Event::Enter);
}

