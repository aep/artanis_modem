using <stdio.h>::{perror, printf};
using <stdlib.h>::{exit};
using <string.h>::{strlen};
using string;
using io;
using io::unix;
using time;
using err;
using net;
using net::udp;
using net::address;

using modem;
using carrier::bootstrap;
using carrier::identity;
using carrier::connect;

using <sys/stat.h>::{open};
using <fcntl.h>::{O_RDWR, O_NOCTTY, O_SYNC};
using <unistd.h>::{sleep};

using "termios.h"::{set_interface_attribs, B115200};

export fn main() -> int {
    for (;;) {
        inner();
    }
}


fn inner() {
    printf("~~~~~~~\n");
    err::Err+1000 mut e;
    err::new(&e);

    unix::Async+100 mut async;
    unix::new(&async);

    int mut fd = 0;
    printf("waiting for /dev/ttyUSB0 to appear\n");
    for (;;) {
        fd = (int)open ("/dev/ttyUSB0", (int)O_RDWR | (int)O_NOCTTY | (int)O_SYNC);
        if fd < 0 {
            perror("open tty");
            sleep(1);
            continue;
        }
        break;
    }

    set_interface_attribs(fd,  B115200, 0);

    modem::Modem+4 mut m;
    m.new();

    m.io = unix::unix(fd);
    unix::make_read_async(&m.io, &async);

    m.start(&e, &async);
    e.abort();

    bootstrap::Store mut store = bootstrap::Store {
        version: 1,
        secret: {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,128,29,30,31,32},
    };


    connect::Connect mut con = {0};
    con.new(&e, &m, &store, &async);
    e.abort();

    for (;;) {
        io::Result rr = modem::poll((modem::Modem mut*)&m, &e, &async);
        err::abort(&e);
        async.wait(&e);
        err::abort(&e);


        if con.poll(&e, &async) == io::Result::Ready {
            con.close();
            exit(0);
            return;
        }


        /*
        if boot.next(&e, &async, &store) == io::Result::Ready {
            e.abort();
            printf("bootstrap success!\n");

            for (usize mut i = 0; i < bootstrap::MAX_BROKERS; i++) {
                address::Address  mut ip4addr = {0};
                address::Address  mut ip6addr = {0};
                identity::Address mut xaddr   = {0};
                if !bootstrap::from_store(&((store.broker)[i]), &ip4addr, &ip6addr, &xaddr) {
                    continue;
                }

                string::String+1000 mut dbg = {0};

                string::format(&dbg, "\nprotocol: %u\n", ((store.broker)[i]).protocol);

                string::append_cstr(&dbg, "ipv4: ");
                ip4addr.to_string(&dbg);
                string::append_cstr(&dbg, "\n");

                string::append_cstr(&dbg, "ipv6: ");
                ip6addr.to_string(&dbg);
                string::append_cstr(&dbg, "\n");


                char mut b[100] = {0};
                identity::address_to_str(&e, b, static(len(b)), &xaddr);
                if err::check(&e) {
                    continue;
                }
                string::format(&dbg, "xaddr: %s\n", (char*)b);

                printf("%.*s", (int)dbg.len, dbg.mem);
            }

            exit(0);
        }
        */



    }

}







